# reasign yes or no to feature oscar_season, where release month is either  "10", "11", "12"
data <- data %>% dplyr::mutate(oscar_season = as.factor(ifelse(thtr_rel_month %in% c('10', '11', '12'), 'yes', 'no')))
typeof(data)
library(ggplot2)      # library to create plots
library(dplyr)        # data manipulation
library(tidyr)
library(statsr)       # staistics functions
library(BAS)          # Bayesian statistics functions
library(GGally)       # library to create plots
library(knitr)        # required to apply knitr options
library(grid)         # arrange plots
library(gridExtra)    # arrange plots
library(MASS)         # AIC functions
library(pander)       # Prints an R object in Pandoc's markdown
load("movies.Rdata")
my.movies <- movies %>% mutate(
feature_film = as.factor(ifelse(title_type == 'Feature Film', 'yes', 'no')),
drama = as.factor(ifelse(genre ==  'Drama', 'yes', 'no')),
mpaa_rating_R = as.factor(ifelse(mpaa_rating == 'R', 'yes', 'no')),
oscar_season = as.factor(ifelse(thtr_rel_month %in% c('10', '11', '12'), 'yes', 'no')),
summer_season = as.factor(ifelse(thtr_rel_month %in% c('5','6', '7', '8'), 'yes', 'no')))
# Summary statistics of n, mean, and variance by factor group
my.table <- my.movies %>%
tbl_df %>%
group_by(feature_film) %>%
summarize(n = n(), Mean = round(mean(audience_score),1),
Variance = round(var(audience_score), 1))
pandoc.table(my.table)
# Plots
my.plot <- ggplot(data = my.movies, aes(x = feature_film, y = audience_score, fill = factor(feature_film), color = factor(feature_film))) +
geom_boxplot(alpha =0.6) +
theme(legend.position=c(0.5, 0.2), plot.title = element_text(hjust = 0.5)) +
labs(title = "Audience score vs Feature", y = "Audience Score", x = "Feature", fill = "feature_film",color = "feature_film")
my.density <- ggplot(my.movies, aes(audience_score)) + geom_density(aes(fill = factor(feature_film),color =factor(feature_film)), alpha = 0.6) +
geom_vline(xintercept = my.table[[1,3]], color = "#F8766D") +
geom_vline(xintercept = my.table[[1,3]] + sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[1,3]] - sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]] , color = "#00BFC4") +
geom_vline(xintercept = my.table[[2,3]]  + sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]]  - sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
theme(legend.position=c(0.2, 0.8), plot.title = element_text(hjust = 0.5)) +
labs(title = "Density chart", y = "P(Audience Score)", x = "Audience Score", fill = "feature_film",color = "feature_film")
grid.arrange(my.plot, my.density,ncol = 2)
# Summary statistics of n, mean, and variance by factor group
my.table <- my.movies %>%
tbl_df %>%
group_by(drama) %>%
summarize(n = n(), Mean = round(mean(audience_score),1),
Variance = round(var(audience_score), 1))
pandoc.table(my.table)
# Plots
my.plot <- ggplot(data = my.movies, aes(x = drama, y = audience_score, fill = factor(drama), color = factor(drama))) +
geom_boxplot(alpha =0.6) +
theme(legend.position=c(0.5, 0.2), plot.title = element_text(hjust = 0.5)) +
labs(title = "Audience score vs Drama", y = "Audience Score", x = "Drama", fill = "drama",color = "drama")
my.density <- ggplot(my.movies, aes(audience_score)) + geom_density(aes(fill = factor(drama),color =factor(drama)), alpha = 0.6) +
geom_vline(xintercept = my.table[[1,3]], color = "#F8766D") +
geom_vline(xintercept = my.table[[1,3]] + sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[1,3]] - sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]] , color = "#00BFC4") +
geom_vline(xintercept = my.table[[2,3]]  + sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]]  - sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
theme(legend.position=c(0.2, 0.8), plot.title = element_text(hjust = 0.5)) +
labs(title = "Density chart", y = "P(Audience Score)", x = "Audience Score", fill = "drama",color = "drama")
grid.arrange(my.plot, my.density,ncol = 2)
# Summary statistics of n, mean, and variance by factor group
my.table <- my.movies %>%
tbl_df %>%
group_by(mpaa_rating_R) %>%
summarize(n = n(), Mean = round(mean(audience_score),1),
Variance = round(var(audience_score), 1))
pandoc.table(my.table)
# Plots
my.plot <- ggplot(data = my.movies, aes(x = mpaa_rating_R, y = audience_score, fill = factor(mpaa_rating_R), color = factor(mpaa_rating_R))) +
geom_boxplot(alpha =0.6) +
theme(legend.position=c(0.5, 0.2), plot.title = element_text(hjust = 0.5)) +
labs(title = "Audience score vs MPAA", y = "Audience Score", x = "MPAA Rating", fill = "mpaa_rating_R",color = "mpaa_rating_R")
my.density <- ggplot(my.movies, aes(audience_score)) + geom_density(aes(fill = factor(mpaa_rating_R),color =factor(mpaa_rating_R)), alpha = 0.6) +
geom_vline(xintercept = my.table[[1,3]], color = "#F8766D") +
geom_vline(xintercept = my.table[[1,3]] + sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[1,3]] - sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]] , color = "#00BFC4") +
geom_vline(xintercept = my.table[[2,3]]  + sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]]  - sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
theme(legend.position=c(0.2, 0.8), plot.title = element_text(hjust = 0.5)) +
labs(title = "Density chart", y = "P(Audience Score)", x = "Audience Score", fill = "mpaa_rating_R",color = "mpaa_rating_R")
grid.arrange(my.plot, my.density,ncol = 2)
# Summary statistics of n, mean, and variance by factor group
my.table <- my.movies %>%
tbl_df %>%
group_by(oscar_season) %>%
summarize(n = n(), Mean = round(mean(audience_score),1),
Variance = round(var(audience_score), 1))
pandoc.table(my.table)
# Plots
my.plot <- ggplot(data = my.movies, aes(x = oscar_season, y = audience_score, fill = factor(oscar_season), color = factor(oscar_season))) +
geom_boxplot(alpha =0.6) +
theme(legend.position=c(0.5, 0.2), plot.title = element_text(hjust = 0.5)) +
labs(title = "Audience score vs Oscar Season", y = "Audience Score", x = "Oscar Season", fill = "oscar_season",color = "oscar_season")
my.density <- ggplot(my.movies, aes(audience_score)) + geom_density(aes(fill = factor(summer_season),color =factor(summer_season)), alpha = 0.6) +
geom_vline(xintercept = my.table[[1,3]], color = "#F8766D") +
geom_vline(xintercept = my.table[[1,3]] + sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[1,3]] - sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]] , color = "#00BFC4") +
geom_vline(xintercept = my.table[[2,3]]  + sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]]  - sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
theme(legend.position=c(0.2, 0.8), plot.title = element_text(hjust = 0.5)) +
labs(title = "Density chart", y = "P(Audience Score)", x = "Audience Score", fill = "oscar_season",color = "oscar_season")
grid.arrange(my.plot, my.density,ncol = 2)
# Summary statistics of n, mean, and variance by factor group
my.table <- my.movies %>%
tbl_df %>%
group_by(summer_season) %>%
summarize(n = n(), Mean = round(mean(audience_score),1),
Variance = round(var(audience_score), 1))
pandoc.table(my.table)
# Plots
my.plot <- ggplot(data = my.movies, aes(x = summer_season, y = audience_score, fill = factor(summer_season), color = factor(summer_season))) +
geom_boxplot(alpha =0.6) +
theme(legend.position=c(0.5, 0.2), plot.title = element_text(hjust = 0.5)) +
labs(title = "Audience score vs Summer Season", y = "Audience Score", x = "Summer Season", fill = "summer_season",color = "summer_season")
my.density <- ggplot(my.movies, aes(audience_score)) + geom_density(aes(fill = factor(summer_season),color =factor(summer_season)), alpha = 0.6) +
geom_vline(xintercept = my.table[[1,3]], color = "#F8766D") +
geom_vline(xintercept = my.table[[1,3]] + sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[1,3]] - sqrt(my.table[[1,4]]), color = "#F8766D", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]] , color = "#00BFC4") +
geom_vline(xintercept = my.table[[2,3]]  + sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
geom_vline(xintercept = my.table[[2,3]]  - sqrt(my.table[[2,4]]), color = "#00BFC4", lty = 2, alpha =0.6) +
theme(legend.position=c(0.2, 0.8), plot.title = element_text(hjust = 0.5)) +
labs(title = "Density chart", y = "P(Audience Score)", x = "Audience Score", fill = "summer_season",color = "summer_season")
grid.arrange(my.plot, my.density,ncol = 2)
bayes_inference(y = audience_score, data = my.movies, cred_level = 0.95,
statistic = "mean", type = "ci", null = 0, show_res = TRUE,
show_summ = TRUE)
bayes_inference(x = feature_film, y = audience_score, data = my.movies, cred_level = 0.95,
hypothesis_prior = c(0.5, 0.5),statistic = "mean", type = "ht", null = 0,
alternative = 'twosided', show_res = TRUE, show_summ = TRUE)
bayes_inference(x = oscar_season, y = audience_score, data = my.movies, cred_level = 0.95,
hypothesis_prior = c(0.5, 0.5), statistic = "mean", type = "ht", null = 0,
alternative = 'twosided', show_res = TRUE, show_summ = TRUE)
bayes_inference(x = summer_season, y = audience_score, data = my.movies, cred_level = 0.95,
hypothesis_prior = c(0.5, 0.5), statistic = "mean", type = "ht", null = 0,
alternative = 'twosided', show_res = TRUE, show_summ = TRUE)
bayes_inference(x = drama, y = audience_score, data = my.movies, cred_level = 0.95,
hypothesis_prior = c(0.5, 0.5), statistic = "mean", type = "ht", null = 0,
alternative = 'twosided', show_res = TRUE, show_summ = TRUE)
bayes_inference(x = mpaa_rating_R, y = audience_score, data = my.movies, cred_level = 0.95,
hypothesis_prior = c(0.5, 0.5), statistic = "mean", type = "ht", null = 0,
alternative = 'twosided', show_res = TRUE, show_summ = TRUE)
col.names <- c("Feature", "BF[H1:H2]", 	"BF[H2:H1]" ,	"Evidence against")
c1 <- c('feature_film',' ','4.221452e+13','H1 (Very Strong)')
c2 <- c('oscar_season','13.3993','','H2 (Positive)')
c3 <- c('summer_season','21.7118',' ','H2 (Positive)')
c4 <- c('drama',' ','22.6567','H1 (Positive)')
c5 <- c('mpaa_rating_R','23.9679',' ','H2 (Positive)')
my.results <- rbind(c1,c2,c3,c4,c5)
df<-data.frame(my.results)
colnames(df) <- col.names
kable(df,row.names = F)
#subset the data
my.movies <- my.movies %>% dplyr::select(audience_score, feature_film, drama, runtime, mpaa_rating_R, thtr_rel_year, oscar_season, summer_season,imdb_rating, imdb_num_votes, critics_score, best_pic_nom, best_pic_win, best_actor_win, best_actress_win, best_dir_win, top200_box)
my.movies.BIC <-  bas.lm(audience_score ~ .,
prior = "BIC",
modelprior = uniform(),
data = my.movies)
my.coef <- coef(my.movies.BIC, estimator = "BMA")
# find posterior probabilities
coefs_bma <- data.frame(parameter = my.coef$namesx, post_mean = my.coef$postmean, post_SD = my.coef$postsd, post_pne0 = my.coef$probne0) %>% arrange(desc(post_pne0)) %>% filter(parameter != "Intercept")
coefs_bma$parameter <- factor(coefs_bma$parameter, levels = coefs_bma$parameter[order(coefs_bma$post_pne0, decreasing = TRUE)])
high_pne0 <- data.frame(parameter = coefs_bma$parameter, post_pne0 = coefs_bma$post_pne0) %>% filter(post_pne0 > 0.5)
# Plot the Data
ggplot(coefs_bma, aes(x = parameter, y = post_pne0)) +
geom_pointrange(aes(ymax = post_pne0), ymin = 0) +
geom_pointrange(data=high_pne0, aes(x = parameter, y = post_pne0, ymax = post_pne0), ymin = 0, color = "red") +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Posterior Marginal Inclusion Probabilities of Predictor Variables",x="Predictors",y = "Marginal Inclusion Probability") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), plot.title = element_text(hjust = 0.5))
# find credible intervals for betas
coefs_beta <- data.frame(confint(my.coef, c(2:17))[,])
coefs_beta$parameter <- rownames(coefs_beta)
rownames(coefs_beta) <- NULL
coefs_bma <- coefs_bma %>% left_join(coefs_beta)
coefs_bma$parameter <- factor(coefs_bma$parameter, levels = coefs_bma$parameter[order(coefs_bma$beta)])
high_pne0 <- high_pne0 %>% left_join(coefs_bma)
# Plot the data
ggplot(coefs_bma, aes(y = beta, x = parameter)) +
geom_pointrange(aes(ymax = X97.5., ymin =X2.5.)) +
geom_point(data=high_pne0, aes(y = beta, x = parameter), color = "red", size = 2.5) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "95% Credible Intervals for Betas",x="Predictors",y = "Beta") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
plot(my.movies.BIC, ask=F, which=1)
summary(my.movies.BIC)
round(summary(my.movies.BIC), 3)
round(summary(my.movies.BIC, rotate=TRUE), 3)
plot(my.movies.BIC, ask=F, which=2)
res.imdb <- data.frame(resid = my.movies$audience_score - predict(my.movies.BIC,estimator = "BMA")$fit)
round(summary(my.movies.BIC), 3)
image(my.movies.BIC, rotate = F)
plot(my.movies.BIC, ask=F, which=1)
par(mfrow=c(2,2))
plot(audience.BIC, ask = F, add.smooth = F, caption="", col.in = 'steelblue', col.ex  = 'darkgrey', pch=17, lwd=2)
plot(my.movies.BIC, ask = F, add.smooth = F, caption="", col.in = 'steelblue', col.ex  = 'darkgrey', pch=17, lwd=2)
plot(my.movies.BIC, ask=F, which=2)
plot(my.movies.BIC, ask=F, which=3)
plot(my.movies.BIC, ask=F, which=4)
plot(my.movies.BIC, ask=F, which=1)
plot(my.movies.BIC, ask=F, which=2)
plot(my.movies.BIC, ask=F, which=3)
plot(my.movies.BIC, ask=F, which=4)
diagnostics(my.movies.BIC)
plot(my.movies.BIC, ask=T, which=3)
plot(my.movies.BIC, ask=F, which=1)
plot(my.movies.BIC, ask=F, which=2)
plot(my.movies.BIC, ask=F, which=3)
plot(my.movies.BIC, ask=F, which=4)
fitted(my.movies.BIC, type="BPM")
fitted(my.movies.BIC, type="BPM")
fitted(my.movies.BIC, type="BMA")
fitted(my.movies.BIC, estimator = "BPM")
my.movies.ZS <-  bas.lm(audience_score ~ .
prior = "ZS-null",
my.movies.ZS <-  bas.lm(audience_score ~ .,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC"
data = my.movies)
my.movies.ZS <-  bas.lm(audience_score ~ .,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC",
data = my.movies)
#subset the data
my.movies <- my.movies %>% dplyr::select(audience_score, feature_film, drama, runtime, mpaa_rating_R, thtr_rel_year, oscar_season, summer_season,imdb_rating, imdb_num_votes, critics_score, best_pic_nom, best_pic_win, best_actor_win, best_actress_win, best_dir_win, top200_box)
my.movies <- na.exclude(my.movies)
my.movies.BIC <-  bas.lm(audience_score ~ .,
prior = "BIC",
modelprior = uniform(),
data = my.movies)
my.movies.BIC <-  bas.lm(audience_score ~ .,
prior = "BIC",
modelprior = uniform(),
data = my.movies)
my.movies.ZS <-  bas.lm(audience_score ~ .,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC",
data = my.movies)
my.movies.ZS <-  bas.lm(audience_score ~ .,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC",
data = my.movies)
image(my.movies.ZS, rotate = F)
plot(my.movies.ZS, ask=F, which=1)
plot(my.movies.ZS, ask=F, which=2)
plot(my.movies.ZS, ask=F, which=3)
plot(my.movies.ZS, ask=F, which=4)
round(summary(my.movies.BIC), 3)
#inference with model selection
final.model <- my.movies.ZS
BMA  = predict(final.model, estimator="BMA")
HPM = predict(final.model, estimator="HPM")
model.ZS = coef(final.model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(final.model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(final.model, estimator="HPM")  # The highest probability model
BPM <- predict(final.model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
# MPM <- predict(model, estimator="MPM")  # The median probability model of Barbieri and Berger
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
###########################################
BPM = predict(my.movies.ZS, estimator="BPM", se.fit=TRUE)
audience.conf.fit = confint(BPM, parm="mean")
audience.conf.pred = confint(BPM, parm="pred")
# cbind(audience.conf.fit, audience.conf.pred)
# plot(audience.conf.fit)
BMA  = predict(final.model, estimator="BMA")
# Data for arrival
pred_movie = data.frame(audience_score = 82, feature_film = "yes", drama = "yes", runtime=116, mpaa_rating_R = "no",thtr_rel_year = 2016, oscar_season = "yes", summer_season = "no", imdb_rating = 8.0, imdb_num_votes = 337591,critics_score=94, best_pic_nom = "yes", best_pic_win = "no", best_actor_win = "no", best_actress_win = "no", best_dir_win = "no", top200_box = "no")
my.prediction <- predict(my.movies.ZS, pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% cred.", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
View(movies)
# Data for arrival
pred_movie = data.frame(audience_score =93 , feature_film = "yes", drama = "yes", runtime=127, mpaa_rating_R = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 7.8, imdb_num_votes = 147067,critics_score=93, best_pic_nom = "yes", best_pic_win = "no", best_actor_win = "no", best_actress_win = "no", best_dir_win = "no", top200_box = "no")
my.prediction <- predict(my.movies.ZS, pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% cred.", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
setwd("~/Workshop/Courses/Statistics_with_R/Course4/Project")
# Data for arrival
#pred_movie = data.frame(audience_score =93 , feature_film = "yes", drama = "yes", runtime=127, mpaa_rating_R = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 7.8, imdb_num_votes = 147067,critics_score=93, best_pic_nom = "yes", best_pic_win = "no", best_actor_win = "no", best_actress_win = "no", best_dir_win = "no", top200_box = "no")
pred_movie = data.frame(audience_score = 82, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(my.movies.ZS, pred_movie, estimator = "BMA", se.fit=TRUE)
# Create a new dataset
final.movies <- my.movies %>% dplyr::select(audience_score, imdb_rating,critics_score )
# Create a new dataset
final.movies <- my.movies %>% dplyr::select(audience_score, imdb_rating,critics_score )
audience.ZS =  bas.lm(audience_score ~ .,
data = final.movies,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC",
MCMC.iterations = 10^6)
rm(audience.ZS)
# Create a new dataset
final.movies <- my.movies %>% dplyr::select(audience_score, imdb_rating,critics_score )
final.movies.ZS =  bas.lm(audience_score ~ .,
data = final.movies,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC",
MCMC.iterations = 10^6)
summary(final.movies.ZS)
View(final.movies)
model <- final.movies.ZS
BMA  = predict(model, estimator="BMA")
HPM = predict(model, estimator="HPM")
model.ZS = coef(model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(model, estimator="HPM")  # The highest probability model
BPM <- predict(model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
# MPM <- predict(model, estimator="MPM")  # The median probability model of Barbieri and Berger
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
# Data for arrival
#pred_movie = data.frame(audience_score =93 , feature_film = "yes", drama = "yes", runtime=127, mpaa_rating_R = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 7.8, imdb_num_votes = 147067,critics_score=93, best_pic_nom = "yes", best_pic_win = "no", best_actor_win = "no", best_actress_win = "no", best_dir_win = "no", top200_box = "no")
pred_movie = data.frame(audience_score = 82, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% cred.", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
# Data for arrival
#pred_movie = data.frame(audience_score =93 , feature_film = "yes", drama = "yes", runtime=127, mpaa_rating_R = "yes",thtr_rel_year = 2016, oscar_season = "no", summer_season = "no", imdb_rating = 7.8, imdb_num_votes = 147067,critics_score=93, best_pic_nom = "yes", best_pic_win = "no", best_actor_win = "no", best_actress_win = "no", best_dir_win = "no", top200_box = "no")
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% cred.", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
model <- final.movies.ZS
BMA  = predict(model, estimator="BMA")
HPM = predict(model, estimator="HPM")
model.ZS = coef(model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(model, estimator="HPM")  # The highest probability model
BPM <- predict(model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
model <- final.movies.ZS
BMA  = predict(model, estimator="BMA")
HPM = predict(model, estimator="HPM")
model.ZS = coef(model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(model, estimator="HPM")  # The highest probability model
BPM <- predict(model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
BPM = predict(model, estimator="BPM", se.fit=TRUE)
conf.fit = confint(BPM, parm="mean")
conf.pred = confint(BPM, parm="pred")
model <- final.movies.ZS
BMA  = predict(model, estimator="BMA")
HPM = predict(model, estimator="HPM")
model.ZS = coef(model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(model, estimator="HPM")  # The highest probability model
BPM <- predict(model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
BPM = predict(model, estimator="BPM", se.fit=TRUE)
conf.fit = confint(BPM, parm="mean")
conf.pred = confint(BPM, parm="pred")
BPM
conf.fit
conf.pred
model <- final.movies.ZS
BMA  = predict(model, estimator="BMA")
HPM = predict(model, estimator="HPM")
model.ZS = coef(model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(model, estimator="HPM")  # The highest probability model
BPM <- predict(model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
BPM = predict(model, estimator="BPM", se.fit=TRUE)
conf.fit = confint(BPM, parm="mean")
conf.pred = confint(BPM, parm="pred")
conf.fit
conf.pred
summary(conf.fit)
model <- final.movies.ZS
BMA  = predict(model, estimator="BMA")
HPM = predict(model, estimator="HPM")
model.ZS = coef(model)
model.ZS$conditionalmeans[HPM$best,]
model.ZS$conditionalsd[HPM$best,]
BMA <- predict(model, estimator="BMA")  # Bayesian model averaging, using optionally only the 'top' models
HPM <- predict(model, estimator="HPM")  # The highest probability model
BPM <- predict(model, estimator="BPM")  # The model that is closest to BMA predictions under squared error loss.
library(GGally)
ggpairs(data.frame(HPM = as.vector(HPM$fit),  #this used predict so we need to extract fitted values
BPM = as.vector(BPM$fit),  # this used fitted
BMA = as.vector(BMA$fit))) # this used predict
BPM = predict(model, estimator="BPM", se.fit=TRUE)
conf.fit = confint(BPM, parm="mean")
conf.pred = confint(BPM, parm="pred")
summary(conf.fit)
summary(conf.pred)
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = red_movie, estimator = "BMA", se.fit=TRUE)
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% cred.", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
my.prediction$Ybma
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% Credible Interval", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
my.prediction$Ybma
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% Credible Interval", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
# Create a new dataset
final.movies <- my.movies %>% dplyr::select(audience_score, imdb_rating,critics_score )
final.movies.ZS =  bas.lm(audience_score ~ .,
data = final.movies,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC")
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% Credible Interval", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
# Create a new dataset
final.movies <- my.movies %>% dplyr::select(audience_score, imdb_rating,critics_score )
final.movies.ZS =  bas.lm(audience_score ~ .,
data = final.movies,
prior = "ZS-null",
modelprior = uniform(),
method = "MCMC",
MCMC.iterations =2*10^6)
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% Credible Interval", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
pred_movie = data.frame(audience_score = 93, imdb_rating = 7.8, critics_score=93)
my.prediction <- predict(final.movies.ZS, newdata = pred_movie, estimator = "BMA", se.fit=TRUE)
ci_pred_movie  <- confint(my.prediction, parm="pred")
RMSE <- sum_table[[2,3]]
row1<- data.frame(type="95% Credible Interval", lwr = ci_pred_movie[1], pred = ci_pred_movie[3], upr = ci_pred_movie[2])
row2 <- data.frame(type ="RMSE", lwr = ci_pred_movie[3] - RMSE, pred = ci_pred_movie[3], upr = ci_pred_movie[3] + RMSE)
pandoc.table(rbind(row1,row2))
install.packages("devtools")
library(devtools)
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("BAS")
